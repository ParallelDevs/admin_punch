<?php

//link de ayuda del modulo
function admin_punch_help($path, $arg) {
  switch ($path) {
    case "admin/help#admin_punch":
      return '' . t("Module built to help employees to set when they came in and go out from work") . '';
    break;
  }
}

//declaracion del bloque
function admin_punch_block_info(){
  $blocks['admin_punch'] = array(
    'info' => t('Admin Punch'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  return $blocks;
}

//vista del bloque
function admin_punch_block_view($delta = ''){
  switch ($delta) {
    case 'admin_punch':
      $block['subject'] = t('Admin Punch!!');
      if (user_access('access admin_punch content')) {
      $block['content'] = drupal_get_form('admin_punch_first_form');
      }
    break;
  }
  return $block;
}

//permiso para los usuarios que tengan permiso, visualicen el bloque
function admin_punch_permission(){
  return array(
    'access admin_punch content' => array(
      'title' => t('Access to admin_punch module'),
    )
  );
}

//formulario para la configuracion
//solo esta el form, faltaria el link en el menu de configuracinones
function admin_punch_form($form, &$form_state){
  $form['administration_form'] = array(
    '#type' => 'textfield',
    '#title' => t('Accepted IP addresses'),
    );
  return system_settings_form($form);
}

//formulario dentro del bloque
function admin_punch_first_form($form, &$form_state){

//este codigo comentado es nada mas para visualizar que la info se esta
//cargando correctamente



/*global $user;
$ka = user_load($user->uid, true);
$ka2 = $ka->uid;
$time = date('h:i:s A');
$addre = ip_address();

  $form['punch_ip_address'] = array(
    '#title' => t('user ip'),
    '#type' => 'textfield',
    '#value' => ip_address(),
    );
  $form['punch_user_id'] = array(
    '#title' => t('user id'),
    '#type' => 'textfield',
    '#value' => $ka2,
    //'#type' => 'hidden',
    );

  $form['punch_time'] = array(
    '#title' => t('Actual time'),
    '#type' => 'textfield',
    '#value' => REQUEST_TIME,
    //'#type' => 'hidden',
    );*/

  $form['button_submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('btn_punch', 'Punch In'),
    );
  return $form;
}

//hook alter para cambiar el nombre del boton, dependiendo de su esta entrando o
//saliendo (entry_time o exit_time)
//
//
//
function admin_punch_form_alter(&$form, &$form_state, $form_id){


}

function admin_punch_first_form_validate($form, &$form_state){

    //Obtencion del UID
    global $user;
    $user_full = user_load($user->uid, true);
    $only_id = $user_full->uid;

    //query para traer el entry time y el exit time del USER de las ultimas 8 horas
    $query_last_punch = db_select('user_punch_time', 'upt')
    ->fields('upt', array('entry_time', 'exit_time'))
    ->condition('upt.UID', $only_id)
    //->condition('created', REQUEST_TIME - 28800)
    ->orderBy('entry_time', 'DESC')
    ->range(0, 1)
    ->execute();

    $prueba = $query_last_punch->fetch();


    switch ($prueba) {
      case is_null($prueba):
        # primera vez insert...
        variable_set('punchin_flag', 'punchin_insert');
        break;

      case $prueba->entry_time != null && $prueba->exit_time == null:
        # update ...
        variable_set('punchin_flag', 'punchin_update');
        break;

      case $prueba->entry_time != null && $prueba->exit_time != null:
        # nuevo insert...
        variable_set('punchin_flag', 'punchin_insertNew');
        break;

      default:
        echo "default del case";
        exit;
        break;
    }

/*
  foreach ($query_last_punch as $record) {


    if ($record->exit_time == NULL) {
      //insert

      variable_set('punchin_flag', 'punchin_insert');





    }else {

      //update
      variable_set('punchin_flag', 'exitt');
      break;
    }
  }*/


}



//funcion para qe guarde los datos una vez que se presione el boton
function admin_punch_first_form_submit($form, &$form_state){

switch (variable_get('punchin_flag')) {
      case variable_get('punchin_flag') == 'punchin_insert':
        # primera vez insert...


            global $user;
            $user_full = user_load($user->uid, true);
            $only_id = $user_full->uid;
      /*$time = date('h:i:s A');
      $addre = ip_address();*/
            variable_set('ipip', ip_address());

            $punch_query = db_insert('user_punch_time')
            ->fields(array(
            'uid' => $only_id,
            'entry_time' => REQUEST_TIME,
            'ip_address' => str_replace(".","",variable_get('ipip')),
            ))
            ->execute();
            drupal_set_message(t('Submitted first'));


      break;

      case variable_get('punchin_flag') == 'punchin_update':
        # update ...
            global $user;
            $user_full = user_load($user->uid, true);
            $only_id_two = $user_full->uid;

            $query_PID = db_select('user_punch_time', 'upt')
            ->fields('upt', array('pid'))
            ->condition('upt.uid', $only_id_two)
            //->condition('created', REQUEST_TIME - 28800)
            ->orderBy('pid', 'DESC')
            ->range(0, 1)
            ->execute();

            $PID_user = $query_PID->fetch();

            $punch_update = db_update('user_punch_time')
            ->fields(array('exit_time' => REQUEST_TIME))
            ->condition('pid', $PID_user->pid, '=')
            ->execute();
            drupal_set_message(t('Updated'));

      break;

      case variable_get('punchin_flag') == 'punchin_insertNew':
        # nuevo insert...


            global $user;
            $user_full = user_load($user->uid, true);
            $only_id = $user_full->uid;
      /*$time = date('h:i:s A');
      $addre = ip_address();*/
            variable_set('ipip', ip_address());

            $punch_query = db_insert('user_punch_time')
            ->fields(array(
            'uid' => $only_id,
            'entry_time' => REQUEST_TIME,
            'ip_address' => str_replace(".","",variable_get('ipip')),
            ))
            ->execute();
            drupal_set_message(t('Submitted new'));


        break;

      default:
        echo "default del casexxx";
        exit;
        break;
    }

/*
if (variable_get('punchin_flag') == 'punchin_insert') {


  # code...
  global $user;
  $user_full = user_load($user->uid, true);
  $only_id = $user_full->uid;
  //$time = date('h:i:s A');
  //$addre = ip_address();
  variable_set('ipip', ip_address());

    $punch_query = db_insert('user_punch_time')
  ->fields(array(
    'uid' => $only_id,
    'entry_time' => REQUEST_TIME,
    'ip_address' => str_replace(".","",variable_get('ipip')),
    ))
  ->execute();
  drupal_set_message(t('Submitted'));


}elseif (variable_get('punchin_flag') == 'punchin_update') {
  echo "dne";
  exit;
  # code...
}*/


if (variable_get('btn_punch') == 'Punch In') {
      variable_set('btn_punch', 'Punch Out');
    }else{
      variable_set('btn_punch', 'Punch In');
    }


}

function admin_punch_menu() {
  $items = array();

  $items['admin/company/punchinout'] = array(
    'title' => 'Admin Page',
    'description' => 'Administration for admin_punch module',
    'page callback' => '_admin_punch_Adminpage',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
      'weight'  => 0,
  );

  return $items;
}



function _admin_punch_Adminpage($message) {



    return $message;
  }
