<?php
//link de ayuda del modulo
/**
 * Implements hook_help().
 */
function admin_punch_help ($path, $arg) {
  switch ($path) {
    case "admin/help#admin_punch":
      return '' . t("Module built to help employees to set when they came in and go out from work") . '';
    break;
  }
}

//declaracion del bloque
/**
 * Implements hook_block_info().
 */
function admin_punch_block_info () {
  $blocks['admin_punch'] = array(
    'info' => t('Admin Punch'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  return $blocks;
}

//vista del bloque
/**
 * Implements hook_block_view().
 */

function admin_punch_block_view($delta = ''){
  switch ($delta) {
    case 'admin_punch':
      $block['subject'] = t('Punch In/Out form');
         if (user_access('access admin_punch content')) {
             if(_admin_punch_check_ip() == NULL) {
                $block['content'] = t("You are not allowed to punch in/out from your current network ip address.");
            } else{
                $block['content'] = drupal_get_form('admin_punch_first_form');     
            }      
        }
    break;
    }
  return $block;
}

/**
 * Implements hook_permission().
 */

//permiso para los usuarios que tengan acceso, visualicen el bloque
function admin_punch_permission() {
  return array(
    'access admin_punch content' => array('title' => t('Access to admin_punch module'),
    )
  );
}

//formulario dentro del bloque
/**
 * Implements hook_form().
 */
function admin_punch_first_form ($form, &$form_state) {

  $form['button_submit'] = array(
    '#type' => 'submit',
    '#value' => _check_value_button_punch(),
    );
  return $form;
}

/**
 * Metodo para verificar la ultima accion del USER, a partir de esto, se
 * asigna el valor al boton para que concuerde
 */
function _check_value_button_punch () {
  global $user;
  $user_full = user_load($user->uid, true);
  $only_id_three = $user_full->uid;

  $query_last_punch = db_select('user_punch_time', 'upt')
  ->fields('upt', array('entry_time', 'exit_time'))
  ->condition('upt.UID', $only_id_three)
  ->orderBy('entry_time', 'DESC')
  ->range(0, 1)
  ->execute();

  $last_punch_var = $query_last_punch->fetch();

  switch ($last_punch_var) {

    case is_null($last_punch_var):
      # primera vez insert...
      variable_set('btn_punch', 'Punch In');
    break;

    case $last_punch_var->entry_time != null && $last_punch_var->exit_time == null:
      # update ...
      variable_set('btn_punch', 'Punch Out');
    break;

    case $last_punch_var->entry_time != null && $last_punch_var->exit_time != null:
      # nuevo insert...
      variable_set('btn_punch', 'Punch In');
    break;

    default:
      variable_set('btn_punch', 'Punch In');
    break;
  }
  return variable_get('btn_punch');
}

//Validacion del formulario
/**
 * Implements hook_validate().
 */

function admin_punch_first_form_validate ($form, &$form_state) {

  //Obtencion del UID
  global $user;
  $user_full = user_load($user->uid, true);
  $only_id = $user_full->uid;

  //query para traer el entry time y el exit time del USER
  $query_last_punch = db_select('user_punch_time', 'upt')
  ->fields('upt', array('entry_time', 'exit_time'))
  ->condition('upt.UID', $only_id)
  ->orderBy('entry_time', 'DESC')
  ->range(0, 1)
  ->execute();

  //Se recupera los datos del query
  $last_punch_var = $query_last_punch->fetch();

  //switch para verificar que las tuplas no esten vacias, o verificar la entrada
  //y salida
  switch ($last_punch_var) {

    case is_null($last_punch_var):
      # primera vez insert...
      variable_set('punchin_flag', 'punchin_insert');
    break;

    case $last_punch_var->entry_time != null && $last_punch_var->exit_time == null:
      # update ...
      variable_set('punchin_flag', 'punchin_update');
    break;

    case $last_punch_var->entry_time != null && $last_punch_var->exit_time != null:
      # nuevo insert...
      variable_set('punchin_flag', 'punchin_insertNew');
    break;

    default:
      variable_set('punchin_flag', 'punchin_error');
    break;
  }
}

//funcion para que guarde los datos una vez que se presione el boton
/**
 * Implements hook_form_submit().
 */
function admin_punch_first_form_submit ($form, &$form_state) {

  switch (variable_get('punchin_flag')) {

    case variable_get('punchin_flag') == 'punchin_insert':
      # primera vez insert...
      # Obtencion del UID
      global $user;
      $user_full = user_load($user->uid, true);
      $only_id = $user_full->uid;

      // Guardado de la ip en la variable ipip
      variable_set('ipip', ip_address());

      //Query que ejecuta el insert en la BD
      $punch_query = db_insert('user_punch_time')
      ->fields(array(
      'uid' => $only_id,
      'entry_time' => REQUEST_TIME,
      'ip_address' => variable_get('ipip'),
      ))
      ->execute();
      variable_set('btn_punch', 'Punch Out');
      drupal_set_message(t('Punch In submitted'));
    break;

    case variable_get('punchin_flag') == 'punchin_update':
      # update ...
      # Obtencion del UID
      global $user;
      $user_full = user_load($user->uid, true);
      $only_id_two = $user_full->uid;

      //Query para buscar la ultima marca que hizo el USER
      $query_PID = db_select('user_punch_time', 'upt')
      ->fields('upt', array('pid'))
      ->condition('upt.uid', $only_id_two)
      //->condition('created', REQUEST_TIME - 28800)
      ->orderBy('pid', 'DESC')
      ->range(0, 1)
      ->execute();

      //Se recuperan los datos
      $PID_user = $query_PID->fetch();

      //Se actualiza la tabla con el timestamp de salida del USER, usando la
      //marca encontrada anteriormente
      $punch_update = db_update('user_punch_time')
      ->fields(array('exit_time' => REQUEST_TIME))
      ->condition('pid', $PID_user->pid, '=')
      ->execute();
      variable_set('btn_punch', 'Punch In');
      drupal_set_message(t('Punch Out submitted'));
    break;

    case variable_get('punchin_flag') == 'punchin_insertNew':
      # nuevo insert...
      # Obtencion del UID
      global $user;
      $user_full = user_load($user->uid, true);
      $only_id = $user_full->uid;

      // Guardado de la ip en la variable ipip
      variable_set('ipip', ip_address());

      //Se inserta el nuevo registro en la tabla
      $punch_query = db_insert('user_punch_time')
      ->fields(array(
      'uid' => $only_id,
      'entry_time' => REQUEST_TIME,
      'ip_address' => variable_get('ipip'),
      ))
      ->execute();
      variable_set('btn_punch', 'Punch Out');
      drupal_set_message(t('Punch In Submitted'));
    break;

    default:
      variable_set('btn_punch', 'Punch In');
      drupal_set_message(t('An error has ocurred, contact the Administrator'));
    break;
  }
}

/**
 * Implements hook_menu().
 */

function admin_punch_menu() {
  
  $items = array();

  $items['admin/company/punchinout'] = array(
    'title' => 'Punch In/Out Settings',
    'description' => 'Administration for admin_punch module',
    'page callback' => 'admin_punch_Adminpage',
    'access callback' => TRUE,
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight'  => 0,
  );
  $items['admin/company/punchinout/delete/%'] = array(
    'title' => 'Delete IP address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_admin_punch_ip_delete', 4),
    'access arguments' => array('access administration pages'), 
 );
  $items['admin/company/punchinout/edit/%'] = array(
    'title' => 'Edit IP address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_admin_punch_ip_Edit',4,5),
    'access arguments' => array('access administration pages'), 
 );

  return $items;
}

/**
 * Pagina donde se va a tener el formulario para ingresar las direcciones ip permitidas para el sistema, ademas se mostrara´ una lista con las direcciones ip permitidas
 */
function admin_punch_Adminpage() {

  $rows = array();
  $header = array(t('Allowed IP addresses'), t('Edit IP'),t('Delete IP'));
  $ip_list = _admin_punch_allowed_ip_list();
  foreach ($ip_list as $ip) {
      $rows[] = array(
      $ip->ip_address,
      l(t('edit'), "admin/company/punchinout/edit/$ip->pid/$ip->ip_address"),
      l(t('delete'), "admin/company/punchinout/delete/$ip->pid/$ip->ip_address"),
    );
  }
  $build['_admin_punch_ip_form'] = drupal_get_form('_admin_punch_ip_form');
  $build['ip_allowed_table'] = array(
   '#theme' => 'table', //Muestra el header donde se van a ver las ip permitidas
   '#header' => $header,
   '#rows' => $rows,
 );
  return $build; 
}
     
  /**
   * Formulario donde el administrador va a poder digitar las direciones ip permitidas
   */
function _admin_punch_ip_form($form, $form_state) {
    
    $form['allowed_ip'] = array(
      '#prefix' =>  t('<strong>Note that your current ip address is <i>'.ip_address().'</strong>'),
      '#title' => t('Allowed IP address'),
      '#type' => 'textfield',
      '#size' => 48,
      '#required' => TRUE,
      '#maxlength' => 15,
      '#description' => t('Enter the IP-address.'),
    );
    $form['description'] = array(
      '#title' => t('Description'),
      '#type' => 'textfield',
      '#size' => 100,
      '#required' => FALSE,
      '#maxlength' => 100,
      '#description' => t('Add a description'),
    );
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
    );
    $form['#validate'][] = '_admin_punch_ip_form_validate';
    $form['#submit'][] = '_admin_punch_allowed_ip_form_submit';

    return $form;
}

/**
 * Función para controlar que no se introduzcan direcciones ip invalidas
 */
function _admin_punch_ip_form_validate($form, &$form_state) {
    
    $allowed_ip = trim($form_state['values']['allowed_ip']);
    if ((filter_var($allowed_ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) == FALSE) && (filter_var($allowed_ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) == FALSE)){
        form_set_error('allowed_ip', t("IP is not a valid IP address."));
    }
}

/*
 * Función para que a la hora que se de clic en el boton add, se agregue lo que tiene el formulario a la base de datos
 */
function _admin_punch_allowed_ip_form_submit($form, &$form_state) {
  
    global $user;
    $user_full = user_load($user->uid, true);
    $only_id = $user_full->uid;
    $fingered_ip = trim($form_state['values']['allowed_ip']);
     
    if(_verifyexistingIP($fingered_ip) == null) {
        $punch_query = db_insert('punch_admin')
    ->fields(array(
        'ip_address' => trim($form_state['values']['allowed_ip']),
        'uid' => $only_id,
        'date' => REQUEST_TIME,
        'description' => trim($form_state['values']['description']),
        ))
    ->execute();
    drupal_set_message(t('Added IP address'));   
    } else {
        drupal_set_message(t('Ip address already exists in the list')); 
    }
}

/**
 * Funcion para verificar si en tabla punch_admin existe una ip igual a la del usuario logueado actualmente
 */
function _admin_punch_check_ip() {
    $ip= ip_address();
    $result = db_query('SELECT pid FROM punch_admin WHERE ip_address = :ip', array(':ip' => $ip));
    $IP_user = $result->fetch();
    return $IP_user;
}

/**
 * Retorna los registros de la tabla punch_admin
 */
function _admin_punch_allowed_ip_list() {
    $result = db_query('SELECT * FROM punch_admin');
    $ip_list = $result->fetchAll();
    return $ip_list;
}
     
/**
 * Muestra el form donde se pregunta que si se desea eliminar esa ip de la lista de direcciones permitida
 */
function _admin_punch_ip_delete($form, &$form_state, $pid, $ip) {
  $form['admin_punch'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  return confirm_form($form, t('Are you sure you want to delete ip %ip ?', array('%ip' => $ip)), 'admin/company/punchinout', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/*
 * Funcion para eliminar un registro de la base de datos, en este caso las ip que se deseen quitar de la lista de direcciones permitidas.
*/
function _admin_punch_ip_delete_submit($form, &$form_state) {

  $pid = $form_state['values']['admin_punch'];
  db_delete('punch_admin')
    ->condition('pid', $pid)
    ->execute();
  $form_state['redirect'] = 'admin/company/punchinout';
}

/*
 * Funcion para mostrar un formulario al usuario en donde va a poder modificar alguna direcion ip
 */
function _admin_punch_ip_Edit($form, $form_state, $pid, $ip) {
    $form['allowed_ip'] = array(
      '#prefix' =>  t('Administrative page for edit ip addresses'),
      '#title' => t('Allowed IP address'),
      '#type' => 'textfield',
      '#size' => 48,
      '#required' => TRUE,
      '#maxlength' => 15,
      '#description' => t(' Enter the IP-address.'),
      '#default_value'=> $ip,
    );
    $form['get_pid'] = array(
      '#type' => 'value',
      '#value' => $pid,
    );   
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Edit'),
    );
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'admin/company/punchinout'),
      '#weight' => 20,
    );
    $form['#validate'][] = '_admin_punch_ip_form_validate';
    $form['#submit'][] = '_admin_punch_ip_Edit_submit';
    
  return $form;
}

/*
 * Funcion para guardar en la base de datos alguna edicion de una direccion ip realizada por el administrador
 */
function _admin_punch_ip_Edit_submit($form, $form_state) {  
    
      $pid = $form_state['values']['get_pid'];
      $punch_update = db_update('punch_admin')
      ->fields(array('ip_address' => trim($form_state['values']['allowed_ip'])))
      ->condition('pid', $pid, '=')
      ->execute();
      drupal_set_message(t('Successful uhjhjpdate'));  
      drupal_goto("admin/company/punchinout");
}

function _verifyexistingIP($fingered_ip) {
    $ip = $fingered_ip;
    $result = db_query('SELECT pid FROM punch_admin WHERE ip_address = :ip', array(':ip' => $ip));
    $IP_user = $result->fetch();
    return $IP_user;
}

function admin_punch_views_api() {
  return array(
    'api' => '3.0',
    );
}

function admin_punch_views_default_views() {
  $path = './' . drupal_get_path('module', 'admin_punch') . '/views/*.inc';
  $views = array();
  foreach (glob($path) as $views_filename) {
    require_once($views_filename);
  }
  return $views;
}


/**
 * Implements views_data hook
 */

function admin_punch_views_data() {
  $data['user_punch_time'] = array(
  'table' => array(
    'base' => array(
      'field' => 'pid',
      'title' => 'User Punch Time',
      'help' => 'This table contains data from users who punches in/out.',
    ),
    'group' => 'User Punch Time',
  ),
  'pid' => array(
    'title' => 'Pid',
    'help' => 'The primary identifier for admin_punch_time.',
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => FALSE,
    ),
  ),
  'uid' => array(
    'title' => 'Uid',
    'help' => 'User Id',
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => FALSE,
    ),
  ),
  'entry_time' => array(
    'title' => 'Entry Time',
    'help' => 'Entry time',
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
  ),
  'exit_time' => array(
    'title' => 'Exit Time',
    'help' => 'Exit time',
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => FALSE,
    ),
  ),
  'ip_address' => array(
    'title' => 'Ip Address',
    'help' => 'User ip address.',
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => FALSE,
    ),
  ),
  'latitude' => array(
    'title' => 'Latitude',
    'help' => 'Latitude',
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => FALSE,
    ),
  ),
  'longitude' => array(
    'title' => 'Longitude',
    'help' => 'Longitude',
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => FALSE,
    ),
  ),
);
  return $data;
}
