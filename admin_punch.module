<?php

//link de ayuda del modulo
/**
 * Implements hook_help().
 */
function admin_punch_help ($path, $arg) {
  switch ($path) {
    case "admin/help#admin_punch":
      return '' . t("Module built to help employees to set when they came in and go out from work") . '';
    break;
  }
}

//declaracion del bloque
/**
 * Implements hook_block_info().
 */
function admin_punch_block_info () {
  $blocks['admin_punch'] = array(
    'info' => t('Admin Punch'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  return $blocks;
}

//vista del bloque
/**
 * Implements hook_block_view().
 */
function admin_punch_block_view ($delta = '') {
  switch ($delta) {
    case 'admin_punch':
      $block['subject'] = t('Admin Punch!!');
   //   if (user_access('access admin_punch content')) {
        if (user_access('access admin_punch content')) {
          if (admin_punch_validate() == NULL) {
            $block['content'] = drupal_get_form('admin_punch_first_form');
          }
          else {
            drupal_set_message(t('You cannot see the module Admin Punch because your ip address is blocked'));
          }
        }
    break;
  }
  return $block;
}


/**
 * Implements hook_permission().
 */

//permiso para los usuarios que tengan acceso, visualicen el bloque
function admin_punch_permission () {
  return array(
    'access admin_punch content' => array('title' => t('Access to admin_punch module'),
    )
  );
}

//formulario dentro del bloque
/**
 * Implements hook_form().
 */
function admin_punch_first_form ($form, &$form_state) {

//este codigo comentado es nada mas para visualizar que la info se esta
//cargando correctamente

/*global $user;
$ka = user_load($user->uid, true);
$ka2 = $ka->uid;
$time = date('h:i:s A');
$addre = ip_address();

  $form['punch_ip_address'] = array(
    '#title' => t('user ip'),
    '#type' => 'textfield',
    '#value' => ip_address(),
    );
  $form['punch_user_id'] = array(
    '#title' => t('user id'),
    '#type' => 'textfield',
    '#value' => $ka2,
    //'#type' => 'hidden',
    );

  $form['punch_time'] = array(
    '#title' => t('Actual time'),
    '#type' => 'textfield',
    '#value' => REQUEST_TIME,
    //'#type' => 'hidden',
    );*/

  $form['button_submit'] = array(
    '#type' => 'submit',
    '#value' => _check_value_button_punch(),
    );
  return $form;
}


/**
 * Metodo para verificar la ultima accion del USER, a partir de esto, se
 * asigna el valor al boton para que concuerde
 */
function _check_value_button_punch () {
  global $user;
  $user_full = user_load($user->uid, true);
  $only_id_three = $user_full->uid;

  $query_last_punch = db_select('user_punch_time', 'upt')
  ->fields('upt', array('entry_time', 'exit_time'))
  ->condition('upt.UID', $only_id_three)
  ->orderBy('entry_time', 'DESC')
  ->range(0, 1)
  ->execute();

  $pruebax = $query_last_punch->fetch();

  switch ($pruebax) {

    case is_null($pruebax):
      # primera vez insert...
      variable_set('btn_punch', 'Punch In');
    break;

    case $pruebax->entry_time != null && $pruebax->exit_time == null:
      # update ...
      variable_set('btn_punch', 'Punch Out');
    break;

    case $pruebax->entry_time != null && $pruebax->exit_time != null:
      # nuevo insert...
      variable_set('btn_punch', 'Punch In');
    break;

    default:
      variable_set('btn_punch', 'Punch In');
    break;
  }
  return variable_get('btn_punch');
}

//Validacion del formulario
/**
 * Implements hook_validate().
 */

function admin_punch_first_form_validate ($form, &$form_state) {

  //Obtencion del UID
  global $user;
  $user_full = user_load($user->uid, true);
  $only_id = $user_full->uid;

  //query para traer el entry time y el exit time del USER
  $query_last_punch = db_select('user_punch_time', 'upt')
  ->fields('upt', array('entry_time', 'exit_time'))
  ->condition('upt.UID', $only_id)
  ->orderBy('entry_time', 'DESC')
  ->range(0, 1)
  ->execute();

  //Se recupera los datos del query
  $prueba = $query_last_punch->fetch();

  //switch para verificar que las tuplas no esten vacias, o verificar la entrada
  //y salida
  switch ($prueba) {

    case is_null($prueba):
      # primera vez insert...
      variable_set('punchin_flag', 'punchin_insert');
    break;

    case $prueba->entry_time != null && $prueba->exit_time == null:
      # update ...
      variable_set('punchin_flag', 'punchin_update');
    break;

    case $prueba->entry_time != null && $prueba->exit_time != null:
      # nuevo insert...
      variable_set('punchin_flag', 'punchin_insertNew');
    break;

    default:
      variable_set('punchin_flag', 'punchin_error');
    break;
  }
}



//funcion para que guarde los datos una vez que se presione el boton
/**
 * Implements hook_form_submit().
 */

function admin_punch_first_form_submit ($form, &$form_state) {

  switch (variable_get('punchin_flag')) {

    case variable_get('punchin_flag') == 'punchin_insert':
      # primera vez insert...
      # Obtencion del UID
      global $user;
      $user_full = user_load($user->uid, true);
      $only_id = $user_full->uid;

      // Guardado de la ip en la variable ipip
      variable_set('ipip', ip_address());

      //Query que ejecuta el insert en la BD
      $punch_query = db_insert('user_punch_time')
      ->fields(array(
      'uid' => $only_id,
      'entry_time' => REQUEST_TIME,
      'ip_address' => variable_get('ipip'),
      ))
      ->execute();
      variable_set('btn_punch', 'Punch Out');
      drupal_set_message(t('Punch In submitted'));
    break;

    case variable_get('punchin_flag') == 'punchin_update':
      # update ...
      # Obtencion del UID
      global $user;
      $user_full = user_load($user->uid, true);
      $only_id_two = $user_full->uid;

      //Query para buscar la ultima marca que hizo el USER
      $query_PID = db_select('user_punch_time', 'upt')
      ->fields('upt', array('pid'))
      ->condition('upt.uid', $only_id_two)
      //->condition('created', REQUEST_TIME - 28800)
      ->orderBy('pid', 'DESC')
      ->range(0, 1)
      ->execute();

      //Se recuperan los datos
      $PID_user = $query_PID->fetch();

      //Se actualiza la tabla con el timestamp de salida del USER, usando la
      //marca encontrada anteriormente
      $punch_update = db_update('user_punch_time')
      ->fields(array('exit_time' => REQUEST_TIME))
      ->condition('pid', $PID_user->pid, '=')
      ->execute();
      variable_set('btn_punch', 'Punch In');
      drupal_set_message(t('Punch Out submitted'));
    break;

    case variable_get('punchin_flag') == 'punchin_insertNew':
      # nuevo insert...
      # Obtencion del UID
      global $user;
      $user_full = user_load($user->uid, true);
      $only_id = $user_full->uid;

      // Guardado de la ip en la variable ipip
      variable_set('ipip', ip_address());

      //Se inserta el nuevo registro en la tabla
      $punch_query = db_insert('user_punch_time')
      ->fields(array(
      'uid' => $only_id,
      'entry_time' => REQUEST_TIME,
      'ip_address' => variable_get('ipip'),
      ))
      ->execute();
      variable_set('btn_punch', 'Punch Out');
      drupal_set_message(t('Punch In Submitted'));
    break;

    default:
      variable_set('btn_punch', 'Punch In');
      drupal_set_message(t('An error has ocurred, contact the Administrator'));
    break;
  }

  // Condicional que cambia el nombre del boton cada vez que se presiona
  /*if (variable_get('btn_punch') == 'Punch In') {
    variable_set('btn_punch', 'Punch Out');
  }
  else {
    variable_set('btn_punch', 'Punch In');
  }*/
}


/**
 * Implements hook_menu().
 */


function admin_punch_menu() {

  $items = array();

  $items['admin/company/punchinout'] = array(
    'title' => 'Admin Page',
    'description' => 'Administration for admin_punch module',
    'page callback' => 'admin_punch_Adminpage',
    'access callback' => TRUE,
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight'  => 0,
  );
  return $items;
}

//Pagina donde se va a tener el formulario para ingresar las ip que se quiere bloquear
function admin_punch_Adminpage () {
  //$rows = array();
 // $header = array(t('Lista de Ip address'), t('Operacion'));

  $build['admin_punch_ip_ranges_form'] = drupal_get_form('admin_punch_ip_ranges_form');
 // $build['ip_ranges_banning_table'] = array(
    //'#theme' => 'table', //Muestra el header donde se van a ver las ip bloqueadas o no...
    //'#header' => $header,
   // '#rows' => $rows,
 //);
  return $build;
  }

  function admin_punch_ip_ranges_form ($form, $form_state) {

  $form['ip_blocked'] = array(
    '#title' => t('Ip Adrress blocked'),
    '#type' => 'textfield',
    '#size' => 48,
    '#required' => TRUE,
    '#maxlength' => 15,
    '#description' => t(' Enter the IP-address  Ej:(192.168.0.1).'),
  );
   $form['description'] = array(
     '#title' => t('Description'),
     '#type' => 'textfield',
     '#size' => 100,
     '#required' => FALSE,
     '#maxlength' => 100,
     '#description' => t('A field to hold the IP description.'),
  );
   $form['actions'] = array('#type' => 'actions');
   $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  $form['#submit'][] = 'admin_punch_ip_ranges_form_submit';

  return $form;
}

function admin_punch_ip_ranges_form_submit ($form, &$form_state) {

    global $user;
    $user_full = user_load($user->uid, true);
    $only_id = $user_full->uid;

    $punch_query = db_insert('punch_admin')
    ->fields(array(
      'ip_address' => trim($form_state['values']['ip_blocked']),
      'uid' => $only_id,
      'date' => REQUEST_TIME,
      'description' => trim($form_state['values']['description']),
      ))
     ->execute();
  drupal_set_message(t('Ip Address blocked'));
}

function admin_punch_validate() {
  $ip = ip_address();
  $result = db_query('SELECT pid FROM punch_admin WHERE ip_address = :ip', array(':ip' => $ip));
  $IP_user = $result->fetch();
  return $IP_user;
}
